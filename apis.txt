
การใข้งาน api

api Requests 
แบบ endpoint
https://bored-api.appbrewery.com/random 
-ส่วนหลังจาก .com จะเรียกกันว่า endpoint ซุึ่งในที่นี้คือ random  
-endpoint จะมีหลายแบบด้วยกัน
-เช่น endpoint filter


แบบ parameters
https://bored-api.appbrewery.com/filter?type=education      อันเดียว
https://bored-api.appbrewery.com/filter?type=social&participants=2   สองอัน โดยการใส่ & 
-ดึงข้อมูลแบบกำหนด parameters

https://bored-api.appbrewery.com/activity/3943506 
-ดึงข้อมูลแบบแจะจง โดย activity จะเป็นชื่อแรกใร obj

JSON
เป็นรูปแบบข้อมูลที่ส่งผ่านอินเทอร์เน็ตด้วยวิธีที่อ่านง่ายแต่มีประสิทธิภาพ และมีโครงสร้างเป็น object javascript 

object ไป JSON
const jsonData = JSON.stringfy(data);
-stringfy = ชือ object javascript

JSON ไป object
const data = JSON.parse(jsonData); 
-jsonData = ข้อมูล JSON 

การใช้ axios เพื่อ get api หรือร้องขอใช้งาน api

code

import axios from "axios";

แบบ get 

app.get("/", async (req, res) => {
  
  try {
    const response = await axios.get("https://bored-api.appbrewery.com/random");
    const result = response.data;
    res.render("index.ejs", { data: result });
    // console.log(result);
  } catch (error) {
    console.error("Failed to make request:", error.message);
    res.render("index.ejs", {
      error: error.message,
    });
  }

});

หรือ แบบ post 

app.post("/", async (req, res) => {
 
  try {
    const typeApi = req.body.type;
    const participantsApi = req.body.participants;
    const response = await axios.get(`https://bored-api.appbrewery.com/filter?type=${typeApi}&participants=${participantsApi}`);
    console.error(response);
    const result = response.data;
    res.render("index.ejs", { data:result[Math.floor(Math.random()*result.length)]});
        // console.log(result);
    } catch (error) {
      console.error("Failed to make request:", error.message);
      res.render("index.ejs", {
        error: error.message,
      });
    }
  // console.log(result);

});

 
แบบส่งเป็น  str ไป ใช้ JSON.stringify
 try{
    const randomSecrets = await axios.get(`https://secrets-api.appbrewery.com/random`);
    const Response = randomSecrets.data;
    console.log(JSON.stringify(Response))
    res.render("index.ejs",{
      content:JSON.stringify(Response)
    })
  }catch(error){
    console.error("Failed to make request:", error.message);
    res.render("index.ejs", {
      error: error.message,
    });
  }



----code----- 
การ get api Authorization แบบต่างๆ

import express from "express";
import axios from "axios";

const app = express();
const port = 3000;
const API_URL = "https://secrets-api.appbrewery.com";   //แยก api กับ endpoint

// TODO: Replace the values below with your own before running this file.
const yourUsername = "";
const yourPassword = "";
const yourAPIKey = "";
const yourBearerToken = "";

app.get("/", (req, res) => {
  res.render("index.ejs", { content: "API Response." });
});
///Authorization 

//เมื่อกดปุ่ม noAuth จะส่ง api/endpoint random กลับไป 
// NO Authorization (ไม่มีการตรวจสอบสิทฮ์)
//axios จะทำการจัดการไว้อยู่แล้ว
app.get("/noAuth", async (req, res) => {
  try {
    const result = await axios.get(API_URL + "/random");
    console.log(result);
    console.log(JSON.stringify(result.data));
    res.render("index.ejs", { content: JSON.stringify(result.data) });
  } catch (error) {
    res.status(404).send(error.message);
  }
});

//Basic Authorization (ตรวจ username password และเข้ารหัสด้วย base64)

app.get("/basicAuth", async (req, res) => {
  try {
    const result = await axios.get(
      API_URL + "/all?page=2",
      {},
      {
        auth: {
          username: yourUsername,
          password: yourPassword,
        },
      }
    );
    res.render("index.ejs", { content: JSON.stringify(result.data) });
  } catch (error) {
    res.status(404).send(error.message);
  }
});


//API Key
//การ
app.get("/apiKey", async (req, res) => {
  try {
    const result = await axios.get(API_URL + "/filter", {
      params: {
        score: 5,
        apiKey: yourAPIKey,
      },
    });
    console.log(JSON.stringify(result.data));
    res.render("index.ejs", { content: JSON.stringify(result.data) });
  } catch (error) {
    res.status(404).send(error.message);
  }
});

const config = {
  headers: { Authorization: `Bearer ${yourBearerToken}` },
};

app.get("/bearerToken", async (req, res) => {
  try {
    const result = await axios.get(API_URL + "/secrets/2", config);
    res.render("index.ejs", { content: JSON.stringify(result.data) });
  } catch (error) {
    res.status(404).send(error.message);
  }
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});





----ejs---- หน้าแสดงผล
<!DOCTYPE html>
<html>

<head>
  <title>Express App</title>
  <style>
    body {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      font-family: Arial, sans-serif;
      background-color: #f0f0f0;
    }

    button {
      margin: 10px;
      padding: 15px 30px;
      font-size: 16px;
      border: none;
      border-radius: 5px;
      color: white;
      cursor: pointer;
    }

    #noAuth {
      background-color: #3498db;
    }

    #basicAuth {
      background-color: #2ecc71;
    }

    #apiKey {
      background-color: #f1c40f;
    }

    #bearerToken {
      background-color: #e74c3c;
    }

    .response-area {
      margin-top: 20px;
      background-color: white;
      padding: 20px;
    }
  </style>
</head>

<body>
  <button type="submit" id="noAuth" onclick="window.location.href='/noAuth'">No Auth</button>
  <button id="basicAuth" onclick="window.location.href='/basicAuth'">Basic Auth</button>
  <button id="apiKey" onclick="window.location.href='/apiKey'">API Key</button>
  <button id="bearerToken" onclick="window.location.href='/bearerToken'">Bearer Token</button>

  <div class="response-area">
    <p>
      <%= content %>
    </p>
  </div>
</body>

</html>
